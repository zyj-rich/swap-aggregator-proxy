// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/interfaces/IERC20.sol";
import "../src/libraries/SafeTransfer.sol";
import {Proxy} from "../src/SafePalProxy.sol";

contract SafePalBscTest is Test {
    address payable proxy = payable(0x271B32D340fBa52cb905AEfE2749ABb789f92d52);
    uint256 dealLine = type(uint256).max;

    receive() external payable {}
    
    function testSwapETHToToken() public {
        uint256 fork = vm.createSelectFork("bsc", 51548069);
        require(vm.activeFork() == fork, "fork not active");

        uint256 amountIn = 1e18;
        uint256 minAmountOut = 654e18; 
        address tokenOut = 0x55d398326f99059fF775485246999027B3197955; //usdt
        address receiver = address(this);
        bytes memory path = hex"4ce5dad000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000237dad77f266f8000000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000002000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000000000000000000000000000000000000000001000000000000000000000000172fcd41e0913e95784454622d1c3724f546f8490000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

        deal(address(this), 1e18 ether);

        Proxy(proxy).SwapExactETHForToken{value: 1e18}(amountIn, minAmountOut, tokenOut, receiver, path, dealLine);
    }

    function testSwapTokenToETH() public {
        uint256 fork = vm.createSelectFork("bsc", 51548522);
        require(vm.activeFork() == fork, "fork not active");

        address tokenIn = 0x55d398326f99059fF775485246999027B3197955;
        uint256 amountIn = 657e18;
        uint256 minAmountOut = 1e18;
        address receiver = address(this);
        IERC20(tokenIn).approve(proxy, amountIn);
        bytes memory path = hex"4ce5dad000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000de5c39ab01ebd0000000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000000000000004800000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000155e9fbb705afc000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000200000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a95d87b443e1929465931611b7951b92c1746dae00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e3f1527a03ca8000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000d82544bf0dfe8385ef8fa34d67e6e4940cc63e16000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000135449d3c79b0ea91ac8719e943566027cd2f9f60000000000000000000000006ec31af1bb9a72aacec12e4ded508861b05f450300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
        deal(tokenIn, address(this), 657e18);

        Proxy(proxy).SwapExactTokenForETH(amountIn, minAmountOut, tokenIn, receiver, path, dealLine);
    }

    function testSwapTokenToToken() public {
        uint256 fork = vm.createSelectFork("bsc", 51548848);
        require(vm.activeFork() == fork, "fork not active");

        address tokenIn = 0x55d398326f99059fF775485246999027B3197955;  //usdt
        address tokenOut = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d; //usdc
        uint256 amountIn = 1e20;
        uint256 minAmountOut = 99e18;
        address receiver = address(this);
        IERC20(tokenIn).approve(proxy, amountIn);
        bytes memory path = hex"4ce5dad000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000056d3380bd29c2800000000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000c71b5f631354be6853efe9c3ab6b9590f8302e810000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d00000000000000000000000000000000000000000000000000000000000000020000000000000000000000005a3105763b608fe6186c5a9d65f3478626becb1e00000000000000000000000008a10ae012df633abbf710ef8bd3a9745a9e581600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
        deal(tokenIn, address(this), 1e20);

        Proxy(proxy).SwapExactTokenForToken(amountIn, minAmountOut, tokenIn, tokenOut, receiver, path, dealLine);
    }
}
